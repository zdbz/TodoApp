{"version":3,"sources":["components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","items","deleteItem","setUpdate","duration","easing","map","item","className","key","id","type","value","text","onChange","e","target","onClick","document","getElementById","style","textDecoration","completeItem","App","props","state","setState","filter","inputHandler","event","currentItem","Date","now","addItem","preventDefault","newItem","placeholder","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAsCeA,EAlCG,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,UAKnC,OACI,6BACI,kBAAC,IAAD,CAAUC,SAAW,IAAKC,OAAO,eAEjCJ,EAAMK,KAAI,SAACC,GAAD,OACN,yBAAKC,UAAU,iBAAiBC,IAAMF,EAAKE,KAC3C,2BACI,2BAAOC,GAAKH,EAAKE,IAAKE,KAAK,OAC1BC,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAUY,EAAEC,OAAOJ,MAAOL,EAAKE,QAI5C,0BAAMD,UAAU,mBAChBS,QAAU,kBAAKf,EAAWK,EAAKE,OAD/B,UAIA,yBAAKD,UAAU,sBAAsBS,QAAU,kBAtBxC,SAACV,GAChBW,SAASC,eAAeZ,EAAKE,KAAKW,MAAMC,eAAiB,eAqBGC,CAAaf,KAAjE,sBCsDDgB,E,kDA3Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAURrB,UAAW,SAACU,EAAKJ,GACf,IAAMR,EAAQ,EAAKwB,MAAMxB,MACzBA,EAAMK,KAAI,SAACC,GACNA,EAAKE,MAAMA,IACZF,EAAKM,KAAOA,MAGhB,EAAKa,SAAS,CACZzB,MAAOA,KAnBO,EAwBlBC,WAAa,SAACO,GACZ,EAAKiB,SAAS,CACdzB,MAAO,EAAKwB,MAAMxB,MAAM0B,QAAO,SAASpB,GACvC,OAAOA,EAAKE,MAAQA,QA3BL,EAgClBmB,aAAc,SAACC,GACb,EAAKH,SAAS,CACZI,YAAY,CACVjB,KAAMgB,EAAMb,OAAOJ,MACnBH,IAAKsB,KAAKC,UApCE,EA0ClBC,QAAU,SAACJ,GACTA,EAAMK,iBAEN,IAAMC,EAAU,EAAKV,MAAMK,YAC3B,GAAoB,KAAjBK,EAAQtB,KAAY,CACrB,IAAMZ,EAAK,sBAAO,EAAKwB,MAAMxB,OAAlB,CAAyBkC,IAEtC,EAAKT,SAAS,CACZzB,MAAOA,EAEP6B,YAAa,CACXjB,KAAK,GACLJ,IAAI,QApDR,EAAKgB,MAAQ,CACXxB,MAAO,GACP6B,YAAY,CACVjB,KAAK,GACLJ,IAAK,KANO,E,qDA6DhB,OACE,yBAAKD,UAAU,OACb,0BAAMA,UAAW,aACjB,2BAAO4B,YAAa,uBAAuBxB,MAAQyB,KAAKZ,MAAMK,YAAYjB,KAC1EC,SAAUuB,KAAKT,eACf,4BAAQX,QAASoB,KAAKJ,SAAtB,QAGA,kBAAC,EAAD,CAAW9B,UAAWkC,KAAKlC,UAAWD,WAAYmC,KAAKnC,WAAYD,MAAQoC,KAAKZ,MAAMxB,a,GAtE5EqC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDyHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0252c498.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './ListItems.css';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst ListItems = ({items, deleteItem, setUpdate}) =>{\r\n\r\n    const completeItem=(item)=>{\r\n        document.getElementById(item.key).style.textDecoration = \"line-through\";\r\n      }\r\n    return(\r\n        <div>\r\n            <FlipMove duration ={300} easing=\"ease-in-out\">\r\n            {      \r\n            items.map((item) => (\r\n                <div className=\"listitem__list\" key ={item.key}>\r\n                <p>\r\n                    <input id= {item.key} type=\"text\"\r\n                     value={item.text}\r\n                     onChange={\r\n                         (e)=>{\r\n                             setUpdate(e.target.value, item.key)\r\n                         }\r\n                     }\r\n                     /> \r\n                <span className=\"listitem__delete\" \r\n                onClick ={()=> deleteItem(item.key)}>\r\n                    Delete\r\n                </span>\r\n                <div className=\"listitem__completed\" onClick ={()=> completeItem(item)}>Completed </div>\r\n                </p>\r\n                \r\n                </div>\r\n            ))\r\n            }\r\n            </FlipMove>\r\n        </div>\r\n    );\r\n}\r\nexport default ListItems;","\nimport React, { Component } from 'react';\nimport './App.css'\nimport ListItems from './components/ListItems';\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      currentItem:{\n        text:'',\n        key: ''\n      }\n    }\n  }\n\n  setUpdate= (text,key) =>{\n    const items = this.state.items;\n    items.map((item) =>{\n      if(item.key===key){\n        item.text = text;\n      }\n    } )\n    this.setState({\n      items: items\n    })\n   \n}\n\n  deleteItem = (key) => {\n    this.setState({\n    items: this.state.items.filter(function(item){\n     return item.key !== key\n    })\n  })\n  }\n\n  inputHandler= (event) =>{\n    this.setState({\n      currentItem:{\n        text: event.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  \n\n  addItem = (event)=>{\n    event.preventDefault();\n    // console.log(this.state.currentItem);\n    const newItem = this.state.currentItem;\n    if(newItem.text !== \"\"){\n      const items = [...this.state.items, newItem];\n    \n    this.setState({\n      items: items,\n      // items: [...this.state.items, this.state.currentItem],\n      currentItem :{\n        text:'',\n        key:''\n      }\n      })\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <form className =\"app__form\">\n        <input placeholder =\"Enter your text here\" value ={this.state.currentItem.text}\n        onChange={this.inputHandler}/>\n        <button onClick={this.addItem}>Add</button>\n        </form>\n\n        <ListItems setUpdate={this.setUpdate} deleteItem={this.deleteItem} items ={this.state.items}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}